package array;

/**
 * 房间中有 n 个灯泡，编号从 0 到 n-1 ，自左向右排成一行。最开始的时候，所有的灯泡都是 关 着的。
 * 请你设法使得灯泡的开关状态和 target 描述的状态一致，其中 target[i] 等于 1 第 i 个灯泡是开着的，等于 0 意味着第 i 个灯是关着的。
 * 有一个开关可以用于翻转灯泡的状态，翻转操作定义如下：
 * 选择当前配置下的任意一个灯泡（下标为 i ）
 * 翻转下标从 i 到 n-1 的每个灯泡
 * 翻转时，如果灯泡的状态为 0 就变为 1，为 1 就变为 0 。
 * 返回达成 target 描述的状态所需的 最少 翻转次数。
 * 示例 1：
 * 输入：target = "10111"
 * 输出：3
 * 解释：初始配置 "00000".
 * 从第 3 个灯泡（下标为 2）开始翻转 "00000" -> "00111"
 * 从第 1 个灯泡（下标为 0）开始翻转 "00111" -> "11000"
 * 从第 2 个灯泡（下标为 1）开始翻转 "11000" -> "10111"
 * 至少需要翻转 3 次才能达成 target 描述的状态
 * 示例 2：
 * <p>
 * 输入：target = "101"
 * 输出：3
 * 解释："000" -> "111" -> "100" -> "101".
 * 20200726
 */
public class BulbSwitcherIV {
    /**
     * 题意：一串灯泡，初始状态都是0，每次switch一次都会把i之后的灯泡打开或者关闭，问最少多少次能达到s状态。
     * 解法：看数据规模就只能是O(n)解法，elaine在纸上画画发现了规律，从左到右模拟一次即可。
     */
    public int minFlips(String s) {
        int cur = 0;
        int res = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) - '0' == cur) continue;
            res++;
            cur = 1 - cur;
        }
        return res;
    }
}
