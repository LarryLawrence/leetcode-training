package greedy;

/**
 * 在柠檬水摊上，每一杯柠檬水的售价为 5 美元。
 *
 * 顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。
 *
 * 每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。
 *
 * 注意，一开始你手头没有任何零钱。
 *
 * 如果你能给每位顾客正确找零，返回 true ，否则返回 false 。
 *
 * 示例 1：
 *
 * 输入：[5,5,5,10,20]
 * 输出：true
 * 解释：
 * 前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。
 * 第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。
 * 第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。
 * 由于所有客户都得到了正确的找零，所以我们输出 true。
 * 20201210
 */
public class LemonadeChange {
    /**
     * 题意：柠檬水5元一瓶；给你一串顾客给出的纸币金额，问能否在不带零钱的情况下完成所有销售。
     * 解法：贪心地先找大额度的钞票，也就是如果给了20的，优先找10块的，生活中也是这样的经验。
     */
    public boolean lemonadeChange(int[] bills) {
        int[] map = new int[2];
        for (int b : bills) {
            if (b == 5) {
                map[0]++;
            } else if (b == 20) {
                if (map[1] > 0 && map[0] > 0) {
                    map[1]--;
                    map[0]--;
                } else if (map[0] >= 3) {
                    map[0] -= 3;
                } else {
                    return false;
                }
            } else if (b == 10) {
                if (map[0] > 0) {
                    map[0]--;
                    map[1]++;
                } else {
                    return false;
                }
            }
        }
        return true;
    }
}
